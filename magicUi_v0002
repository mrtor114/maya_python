# camera and cone tools #
# use at your own risk #
# create 5/29/2020#

# update:4/26/2024


import maya.cmds as cmds
import maya.mel as mel
import re

# incase no TYPE plugin
if not cmds.pluginInfo('Type', loaded=True, query=True):
    cmds.loadPlugin('Type')

# if UI window  already exists will close and re-open #
# This Function will work after first launch UI already- to use it delete hashtag 2 lines below#
# if cmds.window(camWindow, q=True, exists=True):
#     cmds.deleteUI(camWindow)


# grab camera attribute and creat variables#
allCams = cmds.ls(type=('camera'), l=True)
Cams = [camera for camera in allCams if
        cmds.camera(cmds.listRelatives(camera, parent=True)[0], startupCamera=True, q=True)]
myCams = list(set(allCams) - set(Cams))
tCams = cmds.listRelatives(myCams, parent=True, fullPath=True)

camWindow = cmds.window(t='Camera Magic v1.04262024', w=300, h=500)

cmds.columnLayout(adj=True)
cmds.text("***First select Camera***")
cmds.separator(h=20)

selCamText = cmds.textField('Select Camera', w=200)
cmds.button(label='Load Camera', w=50, c='set_camText()')

cmds.text('Set Camera for Render')

cmds.rowLayout(numberOfColumns=4, cw=(150, 150))

cmds.button(label='Default', w=100, c='defaultCam()')
cmds.button(label='AlphaGain', w=100, c='renCam()')
cmds.button(label='RGBA>RGB', w=100, c='rgbMode()')
cmds.button(label='LookThrough', w=100, c='lookThrough()')

cmds.setParent('..')
cmds.separator(h=20)

# cmds.text('Alpha Gain')
alGain = cmds.floatSliderGrp(label="Alpha Gain", min=0, max=1, pre=2, ss=0.01, field=True, value=0.85, dc='alphaGain()')

cmds.separator(h=20)
camLC = cmds.floatSliderGrp(label="Camera Locator Scale", min=1, max=50, field=True, value=1, dc='camLocScale()')
cmds.separator(h=20)

cmds.button(label='Create 3 Render Layers', c='addRenLayer()')
cmds.separator(h=20)
cmds.button(label='Create Motion Trail', c='createMT()')
cmds.separator(h=20)
cmds.text("***Select Locators***")
cmds.separator(h=20)
cmds.button(label="Create Cone Group", c="createCone()")
cmds.separator(h=20)
coneS = cmds.floatSliderGrp(label="Cones Size", min=0, max=20, field=True, value=1, dc='coneSize()')
cmds.separator(h=20)
cmds.button(label="Add Cones to Layer", c="addToLayer()")
# cmds.separator(h=20)
# cmds.button(label="Add to Render Layer", c="addRenLayer()")
# cmds.separator(h=20)


cmds.showWindow(camWindow)


def set_camText():
    selected_camera = cmds.ls(sl=True)[0]
    cmds.select(tCams)
    cmds.textField(selCamText, edit=True, text=myCams[0])
    cmds.select(clear=True)
    cmds.select(selected_camera)


def lookThrough():
    # Get all cameras in the scene
    cameras = cmds.ls(type='camera')

    for camera in cameras:
        # Get the image planes attached to the camera
        image_planes = cmds.listConnections(camera + '.imagePlane', source=True, destination=False)

        # If the camera has an image plane
        if image_planes:
            for image_plane in image_planes:
                # Set the 'displayOnlyIfCurrent' attribute to True
                cmds.setAttr(image_plane + '.displayOnlyIfCurrent', True)
    cmds.select(clear=True)


def clipPlane():
    defCams = ['perspShape', 'topShape', 'sideShape', 'frontShape']
    for i in defCams:
        cmds.setAttr((i + '.nearClipPlane'), 1.0)
        cmds.setAttr((i + '.farClipPlane'), 10000000)


def defaultCam():
    allCamds = cmds.ls(sl=True)
    cmds.setAttr('imagePlaneShape1.alphaGain', 1)
    cmds.setAttr('imagePlaneShape1.depth', 4500)


def rgbMode():
    # Get all image plane nodes in the scene
    imagePlanes = cmds.ls(type="imagePlane")
    # Loop through each image plane
    for imagePlane in imagePlanes:
        # Set the display mode to "RGB"
        cmds.setAttr(imagePlane + ".displayMode", 2)


def renCam():
    cmds.setAttr('imagePlaneShape1.alphaGain', 0.85)
    cmds.setAttr('imagePlaneShape1.useFrameExtension', 1)
    cmds.setAttr('imagePlaneShape1.frameCache', 350)
    cmds.setAttr('imagePlaneShape1.depth', 2)
    cmds.setAttr((myCams[0] + '.nearClipPlane'), 1.0)
    cmds.setAttr((myCams[0] + '.farClipPlane'), 10000000)
    clipPlane()
    addDisLayer()


def alphaGain():
    gScale = cmds.floatSliderGrp(alGain, pre=2, ss=0.01, q=True, value=True)
    cmds.setAttr('imagePlaneShape1.alphaGain', gScale)


def camLocScale():
    cScale = cmds.floatSliderGrp(camLC, q=True, value=True)
    cmds.setAttr(myCams[0] + '.locatorScale', cScale)


def addDisLayer():
    cmds.createDisplayLayer(name='Camera_#', nr=True)
    cmds.setAttr('Camera*.color', 6)


def createMT():
    sTime = int(cmds.playbackOptions(q=True, min=True))
    eTime = int(cmds.playbackOptions(q=True, max=True))
    # sel = cmds.ls(sl=True)
    cmds.snapshot(tCams, st=sTime, et=eTime, mt=True, n='MotionTrail_#')
    cmds.editRenderLayerMembers('Perspective', 'MotionTrail*')


def addRenLayer():
    cmds.createRenderLayer(tCams, name='geo', nr=True)
    cmds.createRenderLayer(tCams, name='Cone', nr=True)
    cmds.createRenderLayer(tCams, name='Perspective', nr=True)


# all functions declare
def textToSpacedHex(inputText):
    out = []
    for c in inputText:
        hx = f"{ord(c):x}"
        out.append(hx)
    return ' '.join(out)


def numberGenerator(number):
    hexString = textToSpacedHex(number)
    mel.eval('CreatePolygonType')
    t3d_trans = cmds.ls(sl=True)[0]
    t3d_node = cmds.listConnections('%s.message' % t3d_trans)[0]
    t3d_extrude = cmds.listConnections('%s.outputMesh' % t3d_node)[0]
    cmds.setAttr('%s.textInput' % t3d_node, hexString, type='string')
    cmds.setAttr('%s.enableExtrusion' % t3d_extrude, 0)
    cmds.setAttr("%s.fontSize" % t3d_node, 1.5)
    cmds.setAttr("%s.tracking" % t3d_node, -10)
    cmds.setAttr("%s.alignmentMode" % t3d_node, 2)

    return t3d_trans


def createCone():
    mySelection = cmds.ls(selection=True, fl=True)
    groupCones = cmds.group(empty=True, name="cone_grp_#")

    for sel in mySelection:
        selPos = cmds.xform(sel, q=True, ws=True, t=True)
        # create cone
        coneTip = cmds.polyCone(sx=4, sc=1, h=3)
        cmds.xform(coneTip, os=True, piv=(0, 1.5, 0))
        cmds.move(0, -1.5, 0)
        cmds.rotate(0, 0, 180)
        cmds.makeIdentity(apply=True, t=1, r=1, s=1, n=0)
        # create number and position it, use numbering from locator selection instead
        coneNumber = [x for x in re.findall(r'-?\d+\.?\d*', sel)][-1]
        t3d_trans = numberGenerator(coneNumber)
        cmds.move(-0.17, 3, 0, t3d_trans)
        # combine cone and number
        coneNo = cmds.polyUnite(t3d_trans, coneTip[0], cp=False, n='cone_' + coneNumber)
        cmds.delete(ch=True)

        cmds.move(selPos[0], selPos[1], selPos[2], coneNo[0])
        cmds.parent(coneNo[0], groupCones)
        cmds.select(groupCones, hi=True)
        cmds.select('cone_grp*', d=True)
        # cmds.createDisplayLayer(name='cone_group#', nr=True)
        # cmds.setAttr('cone_group*.color', 13)
        # cmds.editRenderLayerMembers('Cone', 'cone_grp*')


def coneSize():
    coneScale = cmds.floatSliderGrp(coneS, q=True, value=True)
    cmds.scale(coneScale, coneScale, coneScale)


def addToLayer():
    cmds.createDisplayLayer(name='cone_group#', nr=True)
    cmds.setAttr('cone_group*.color', 13)
    cmds.editRenderLayerMembers('Cone', 'cone_grp*')
